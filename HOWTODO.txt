1. pip install brython
2. (in empty folder) brython-cli --install (this adds brython.js and brython_stdlib.js locally)
3. add python files (pure python code to folder)
4. add <script type="text/plain" src="myfunctions.py"></script> in "head" element (or wherever your file is located)
5. start http sever locally (python -m http.server)
6. in firefox/chrome, go to http://localhost:8000/index.html (where index.html is your site)

# html canvas:
# <canvas id="myCanvas" width="400" height="400" style="border:1px solid #000000;"></canvas> 

extra:
<script type="text/plain" src="src/__init__.py"></script>
<script type="text/plain" src="src/myfunctions.py"></script>
<script type="text/plain" src="src/myfile.py"></script>





<canvas id="draw" width="300" height="225" style="border:1px solid #000000;"></canvas>
<canvas id="text" width="150" height="225" style="border:1px solid #000000;"></canvas>










from browser import document, svg
import myfunctions

canvas_draw = document["draw"]
canvas_text = document["text"]

ctx_draw = canvas_draw.getContext("2d");
ctx_text = canvas_text.getContext("2d");

myfunctions.draw_star(canvas_draw)
canvas_draw <= svg.polygon(fill="red", stroke="blue", stroke_width="10", points=""" 75,38  90,80  135,80  98,107 111,150 75,125  38,150 51,107 15,80  60,80""")

ctx_text.fillText("example text", 50, 50);
document <= myfunctions.example_text()




canvas_draw.fillStyle = "#FF0000"
#ctx.fillRect(x, y, 100.0, 100.0)





# DRAG AND DROP FUNCTIONALITY
    def grab(ev):
        
       // find out which element we moused down on
       targetElement = ev.target;

       // you cannot drag the background itself, so ignore any attempts to mouse down on it
       if ( BackDrop != targetElement )
       {
          //set the item moused down on as the element to be dragged
          DragTarget = targetElement;

          // move this element to the "top" of the display, so it is (almost)
          //    always over other elements (exception: in this case, elements that are
          //    "in the folder" (children of the folder group) with only maintain
          //    hierarchy within that group
          DragTarget.parentNode.appendChild( DragTarget );

          // turn off all pointer events to the dragged element, this does 2 things:
          //    1) allows us to drag text elements without selecting the text
          //    2) allows us to find out where the dragged element is dropped (see Drop)
          DragTarget.setAttributeNS(null, 'pointer-events', 'none');

          // we need to find the current position and translation of the grabbed element,
          //    so that we only apply the differential between the current location
          //    and the new location
          var transMatrix = DragTarget.getCTM();
          GrabPoint.x = TrueCoords.x - Number(transMatrix.e);
          GrabPoint.y = TrueCoords.y - Number(transMatrix.f);
       }

    def drag(ev):
       // account for zooming and panning
       GetTrueCoords(evt);

       // if we don't currently have an element in tow, don't do anything
       if (DragTarget)
       {
          // account for the offset between the element's origin and the
          //    exact place we grabbed it... this way, the drag will look more natural
          var newX = TrueCoords.x - GrabPoint.x;
          var newY = TrueCoords.y - GrabPoint.y;

          // apply a new tranform translation to the dragged element, to display
          //    it in its new location
          DragTarget.setAttributeNS(null, 'transform', 'translate(' + newX + ',' + newY + ')');
       }


    def drop(ev):
       // if we aren't currently dragging an element, don't do anything
       if ( DragTarget )
       {
          // since the element currently being dragged has its pointer-events turned off,
          //    we are afforded the opportunity to find out the element it's being dropped on
          var targetElement = evt.target;

          // turn the pointer-events back on, so we can grab this item later
          DragTarget.setAttributeNS(null, 'pointer-events', 'all');
          if ( 'Folder' == targetElement.parentNode.id )
          {
             // if the dragged element is dropped on an element that is a child
             //    of the folder group, it is inserted as a child of that group
             targetElement.parentNode.appendChild( DragTarget );
             alert(DragTarget.id + ' has been dropped into a folder, and has been inserted as a child of the containing group.');
          }
          else
          {
             // for this example, you cannot drag an item out of the folder once it's in there;
             //    however, you could just as easily do so here
             alert(DragTarget.id + ' has been dropped on top of ' + targetElement.id);
          }

          // set the global variable to null, so nothing will be dragged until we
          //    grab the next element
          DragTarget = null;
       }